/* src/routes/bookmarks/Overview.svelte generated by Svelte v3.31.1 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	component_subscribe,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	mount_component,
	not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out
} from "../../../web_modules/svelte/internal.js";

import { onMount } from "../../../web_modules/svelte.js";

import {
	ChevronLeftIcon,
	FolderIcon,
	CpuIcon,
	LinkIcon
} from "../../../web_modules/svelte-feather-icons.js";

import { filter, overview } from "../../stores.js";
import BookmarkLink from "./BookmarkLink.js";
import chromeApi from "../../background/chrome-api.js";

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[18] = list[i];
	return child_ctx;
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[18] = list[i];
	child_ctx[20] = i;
	return child_ctx;
}

// (83:0) {#if folder}
function create_if_block(ctx) {
	let div8;
	let div7;
	let div2;
	let div0;
	let foldericon0;
	let t0;
	let span0;
	let t1;
	let t2;
	let div1;
	let t3_value = /*path*/ ctx[4]?.replace(/\/\/.*?\//g, "/") + "";
	let t3;
	let t4;
	let div6;
	let div5;
	let div3;
	let foldericon1;
	let t5;
	let span1;
	let t6_value = /*folders*/ ctx[3].length + "";
	let t6;
	let t7;
	let div4;
	let linkicon;
	let t8;
	let span2;
	let t9_value = /*links*/ ctx[2].length + "";
	let t9;
	let t10;
	let current_block_type_index;
	let if_block;
	let current;
	foldericon0 = new FolderIcon({ props: { size: "1x" } });

	foldericon1 = new FolderIcon({
			props: {
				class: "stroke-current text-blue-300",
				size: "2x"
			}
		});

	linkicon = new LinkIcon({
			props: {
				class: "stroke-current text-blue-300 stroke-2",
				size: "2x"
			}
		});

	const if_block_creators = [create_if_block_1, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (!/*filterTerms*/ ctx[5].length) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			div8 = element("div");
			div7 = element("div");
			div2 = element("div");
			div0 = element("div");
			create_component(foldericon0.$$.fragment);
			t0 = space();
			span0 = element("span");
			t1 = text(/*title*/ ctx[1]);
			t2 = space();
			div1 = element("div");
			t3 = text(t3_value);
			t4 = space();
			div6 = element("div");
			div5 = element("div");
			div3 = element("div");
			create_component(foldericon1.$$.fragment);
			t5 = space();
			span1 = element("span");
			t6 = text(t6_value);
			t7 = space();
			div4 = element("div");
			create_component(linkicon.$$.fragment);
			t8 = space();
			span2 = element("span");
			t9 = text(t9_value);
			t10 = space();
			if_block.c();
			attr(span0, "class", "text-xs px-1");
			attr(div0, "class", "flex items-stretch m-0 p-0 space-y-0 ");
			attr(div1, "class", "inset-x-0 space-y-0 text-xs text-gray-500");
			attr(div2, "class", "space-y-0 m-0 p-0 flex");
			attr(span1, "class", "absolute font-bold text-pink-900 text-xs");
			attr(div3, "class", "flex items-center justify-center w-7 h-7 rounded-full bg-gray-100");
			attr(span2, "class", "absolute font-bold text-pink-900 text-xs");
			attr(div4, "class", "flex items-center justify-center w-7 h-7 rounded-full bg-gray-100");
			attr(div5, "class", "flex");
			attr(div6, "class", "flex items-center text-xs ");
			attr(div7, "class", "flex justify-between w-full");
			attr(div8, "class", "m-3");
		},
		m(target, anchor) {
			insert(target, div8, anchor);
			append(div8, div7);
			append(div7, div2);
			append(div2, div0);
			mount_component(foldericon0, div0, null);
			append(div0, t0);
			append(div0, span0);
			append(span0, t1);
			append(div2, t2);
			append(div2, div1);
			append(div1, t3);
			append(div7, t4);
			append(div7, div6);
			append(div6, div5);
			append(div5, div3);
			mount_component(foldericon1, div3, null);
			append(div3, t5);
			append(div3, span1);
			append(span1, t6);
			append(div5, t7);
			append(div5, div4);
			mount_component(linkicon, div4, null);
			append(div4, t8);
			append(div4, span2);
			append(span2, t9);
			append(div8, t10);
			if_blocks[current_block_type_index].m(div8, null);
			current = true;
		},
		p(ctx, dirty) {
			if (!current || dirty & /*title*/ 2) set_data(t1, /*title*/ ctx[1]);
			if ((!current || dirty & /*path*/ 16) && t3_value !== (t3_value = /*path*/ ctx[4]?.replace(/\/\/.*?\//g, "/") + "")) set_data(t3, t3_value);
			if ((!current || dirty & /*folders*/ 8) && t6_value !== (t6_value = /*folders*/ ctx[3].length + "")) set_data(t6, t6_value);
			if ((!current || dirty & /*links*/ 4) && t9_value !== (t9_value = /*links*/ ctx[2].length + "")) set_data(t9, t9_value);
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(div8, null);
			}
		},
		i(local) {
			if (current) return;
			transition_in(foldericon0.$$.fragment, local);
			transition_in(foldericon1.$$.fragment, local);
			transition_in(linkicon.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(foldericon0.$$.fragment, local);
			transition_out(foldericon1.$$.fragment, local);
			transition_out(linkicon.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div8);
			destroy_component(foldericon0);
			destroy_component(foldericon1);
			destroy_component(linkicon);
			if_blocks[current_block_type_index].d();
		}
	};
}

// (123:4) {:else}
function create_else_block(ctx) {
	let div1;
	let div0;
	let span;
	let t1;
	let foldericon;
	let t2;
	let ul;
	let current;
	foldericon = new FolderIcon({ props: { size: "1x" } });
	let each_value_1 = /*leafs*/ ctx[6].filter(/*func_1*/ ctx[13]);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			span = element("span");
			span.textContent = "./*/";
			t1 = space();
			create_component(foldericon.$$.fragment);
			t2 = space();
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(span, "class", "px-1");
			attr(div0, "class", "flex items-center ");
			attr(ul, "class", "style-nose p-1");
			attr(div1, "class", "py-2");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, span);
			append(div0, t1);
			mount_component(foldericon, div0, null);
			append(div1, t2);
			append(div1, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*leafs, filterTerms, path*/ 112) {
				each_value_1 = /*leafs*/ ctx[6].filter(/*func_1*/ ctx[13]);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(ul, null);
					}
				}

				group_outros();

				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(foldericon.$$.fragment, local);

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			transition_out(foldericon.$$.fragment, local);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(foldericon);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (115:4) {#if !filterTerms.length}
function create_if_block_1(ctx) {
	let ul;
	let current;
	let each_value = /*links*/ ctx[2].filter(/*func*/ ctx[11]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(ul, "class", "style-nose p-2");
		},
		m(target, anchor) {
			insert(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*links, filterTerms, removeLink*/ 164) {
				each_value = /*links*/ ctx[2].filter(/*func*/ ctx[11]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(ul, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(ul);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (131:12) {#each leafs.filter(l => filterTerms.every( ft => l.title.toLowerCase().includes(ft) ) ) as link}
function create_each_block_1(ctx) {
	let bookmarklink;
	let current;

	bookmarklink = new BookmarkLink({
			props: {
				link: /*link*/ ctx[18],
				relative: /*path*/ ctx[4]
			}
		});

	return {
		c() {
			create_component(bookmarklink.$$.fragment);
		},
		m(target, anchor) {
			mount_component(bookmarklink, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const bookmarklink_changes = {};
			if (dirty & /*leafs, filterTerms*/ 96) bookmarklink_changes.link = /*link*/ ctx[18];
			if (dirty & /*path*/ 16) bookmarklink_changes.relative = /*path*/ ctx[4];
			bookmarklink.$set(bookmarklink_changes);
		},
		i(local) {
			if (current) return;
			transition_in(bookmarklink.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(bookmarklink.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(bookmarklink, detaching);
		}
	};
}

// (118:8) {#each links.filter(l => !filterTerms.length || filterTerms.every( ft => l.title.toLowerCase().includes(ft) ) ) as link, i}
function create_each_block(ctx) {
	let bookmarklink;
	let current;

	function remove_handler() {
		return /*remove_handler*/ ctx[12](/*link*/ ctx[18], /*i*/ ctx[20]);
	}

	bookmarklink = new BookmarkLink({ props: { link: /*link*/ ctx[18] } });
	bookmarklink.$on("remove", remove_handler);

	return {
		c() {
			create_component(bookmarklink.$$.fragment);
		},
		m(target, anchor) {
			mount_component(bookmarklink, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const bookmarklink_changes = {};
			if (dirty & /*links, filterTerms*/ 36) bookmarklink_changes.link = /*link*/ ctx[18];
			bookmarklink.$set(bookmarklink_changes);
		},
		i(local) {
			if (current) return;
			transition_in(bookmarklink.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(bookmarklink.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(bookmarklink, detaching);
		}
	};
}

function create_fragment(ctx) {
	let title_value;
	let t;
	let if_block_anchor;
	let current;
	document.title = title_value = /*title*/ ctx[1];
	let if_block = /*folder*/ ctx[0] && create_if_block(ctx);

	return {
		c() {
			t = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			insert(target, t, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if ((!current || dirty & /*title*/ 2) && title_value !== (title_value = /*title*/ ctx[1])) {
				document.title = title_value;
			}

			if (/*folder*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*folder*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(t);
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $overview;
	let $filter;
	component_subscribe($$self, overview, $$value => $$invalidate(9, $overview = $$value));
	component_subscribe($$self, filter, $$value => $$invalidate(10, $filter = $$value));
	let folder;
	let id, title = "", children = [];
	let links = [], folders = [];
	let path = "";
	let filterTerms = [];
	let leafs = [];
	let word; // = 'svelte'

	function searchTag(tag) {
		filter.update(v => tag);
		word = tag;
	}

	async function createFolder() {
		let parentId = folder.id || "1";
		let title = $filter;
		let result = await chromeApi.bookmarks.create({ parentId, title });
		await dumpBookmarks();
	}

	function removeLink(link, i) {
		// {detail: link}
		console.log("removed", link, i, links.splice(i, 1));

		$$invalidate(2, links = [...links.slice(0, i), ...links.slice(i + 1)]);
		$$invalidate(0, folder.links = links, folder);
		chromeApi.bookmarks.remove(link.id);
	}

	const func = l => !filterTerms.length || filterTerms.every(ft => l.title.toLowerCase().includes(ft));
	const remove_handler = (link, i) => removeLink(link, i);
	const func_1 = l => filterTerms.every(ft => l.title.toLowerCase().includes(ft));

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$overview*/ 512) {
			$: $$invalidate(0, folder = $overview);
		}

		if ($$self.$$.dirty & /*$filter*/ 1024) {
			$: $$invalidate(5, filterTerms = $filter.split(" ").filter(t => (/^\w{2}/).test(t)));
		}

		if ($$self.$$.dirty & /*folder*/ 1) {
			$: if (folder) {
				console.log(folder);
				$$invalidate(6, leafs = chromeApi.operations.getAllLeaf(folder));
				id = folder.id;
				$$invalidate(1, title = folder.title);
				$$invalidate(8, children = folder.children);
				$$invalidate(4, path = folder.path);
			}
		}

		if ($$self.$$.dirty & /*children*/ 256) {
			$: if (children) {
				$$invalidate(2, links = children.filter(link => link.url));
				$$invalidate(3, folders = children.filter(link => !link.url));
			}
		}
	};

	return [
		folder,
		title,
		links,
		folders,
		path,
		filterTerms,
		leafs,
		removeLink,
		children,
		$overview,
		$filter,
		func,
		remove_handler,
		func_1
	];
}

class Overview extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, not_equal, {});
	}
}

export default Overview;