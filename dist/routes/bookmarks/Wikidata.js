/* src/routes/bookmarks/Wikidata.svelte generated by Svelte v3.31.1 */
import {
	SvelteComponent,
	append,
	attr,
	destroy_each,
	detach,
	element,
	empty,
	handle_promise,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	set_data,
	space,
	text
} from "../../../web_modules/svelte/internal.js";

function get_then_context(ctx) {
	ctx[5] = ctx[8].label !== undefined ? ctx[8].label : "";

	ctx[6] = ctx[8].description !== undefined
	? ctx[8].description
	: "...";

	ctx[7] = ctx[8].tags !== undefined ? ctx[8].tags : [];
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[9] = list[i];
	return child_ctx;
}

// (68:0) {:catch error}
function create_catch_block(ctx) {
	return { c: noop, m: noop, p: noop, d: noop };
}

// (59:61)      <div class="text-xs" >         <span class="" >{label}
function create_then_block(ctx) {
	get_then_context(ctx);
	let div1;
	let span;
	let t0_value = /*label*/ ctx[5] + "";
	let t0;
	let t1;
	let t2_value = /*description*/ ctx[6] + "";
	let t2;
	let t3;
	let div0;
	let each_value = /*tags*/ ctx[7];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div1 = element("div");
			span = element("span");
			t0 = text(t0_value);
			t1 = text(": ");
			t2 = text(t2_value);
			t3 = space();
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(span, "class", "");
			attr(div1, "class", "text-xs");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, span);
			append(span, t0);
			append(span, t1);
			append(span, t2);
			append(div1, t3);
			append(div1, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}
		},
		p(ctx, dirty) {
			get_then_context(ctx);
			if (dirty & /*entities*/ 2 && t0_value !== (t0_value = /*label*/ ctx[5] + "")) set_data(t0, t0_value);
			if (dirty & /*entities*/ 2 && t2_value !== (t2_value = /*description*/ ctx[6] + "")) set_data(t2, t2_value);

			if (dirty & /*word, entities*/ 3) {
				each_value = /*tags*/ ctx[7];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div0, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (63:8) {#each tags as tag}
function create_each_block(ctx) {
	let button;
	let t_value = /*tag*/ ctx[9] + "";
	let t;
	let mounted;
	let dispose;

	function click_handler() {
		return /*click_handler*/ ctx[2](/*tag*/ ctx[9]);
	}

	return {
		c() {
			button = element("button");
			t = text(t_value);
			attr(button, "class", "mr-1 px-1 bg-gray-100 truncate");
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, t);

			if (!mounted) {
				dispose = listen(button, "click", click_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*entities*/ 2 && t_value !== (t_value = /*tag*/ ctx[9] + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

// (1:0) <script>      export let word      let entities      $: entities = searchEntities(word).then((eid) => {             return getEntities(eid, 1)     }
function create_pending_block(ctx) {
	return { c: noop, m: noop, p: noop, d: noop };
}

function create_fragment(ctx) {
	let await_block_anchor;
	let promise;

	let info = {
		ctx,
		current: null,
		token: null,
		hasCatch: true,
		pending: create_pending_block,
		then: create_then_block,
		catch: create_catch_block,
		value: 8,
		error: 12
	};

	handle_promise(promise = /*entities*/ ctx[1], info);

	return {
		c() {
			await_block_anchor = empty();
			info.block.c();
		},
		m(target, anchor) {
			insert(target, await_block_anchor, anchor);
			info.block.m(target, info.anchor = anchor);
			info.mount = () => await_block_anchor.parentNode;
			info.anchor = await_block_anchor;
		},
		p(new_ctx, [dirty]) {
			ctx = new_ctx;
			info.ctx = ctx;

			if (dirty & /*entities*/ 2 && promise !== (promise = /*entities*/ ctx[1]) && handle_promise(promise, info)) {
				
			} else {
				const child_ctx = ctx.slice();
				child_ctx[8] = child_ctx[12] = info.resolved;
				info.block.p(child_ctx, dirty);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(await_block_anchor);
			info.block.d(detaching);
			info.token = null;
			info = null;
		}
	};
}

async function searchEntities(search) {
	console.log("wikibase search:", search);
	if (!search) throw "no search term";
	let url = `https://www.wikidata.org/w/api.php?action=wbsearchentities&search=${search}&language=en&limit=1&continue=0&format=json&uselang=en&type=item&origin=*`;
	console.log(url);
	let res = await fetch(url);
	if (!res.ok) return false;
	let result = await res.json();
	if (!result || !result.search || !result.search.length) return;
	let eid = result.search[0].id;
	return eid;
}

function instance($$self, $$props, $$invalidate) {
	let { word } = $$props;
	let entities;

	/*
 * https://www.wikidata.org/w/api.php?action=help&modules=wbgetentities
 * props= info|sitelinks|aliases|labels|descriptions|claims|datatype
 */
	async function getEntities(eid, deep = 0) {
		let url = `https://www.wikidata.org/w/api.php?action=wbgetentities&ids=${eid}&format=json&languages=en&origin=*`;
		console.log(url);
		let resE = await fetch(url);
		if (!resE.ok) return false;
		let { entities, success } = await resE.json();
		let { labels, descriptions, aliases, claims, sitelinks } = entities[eid];

		if (deep > 0) {
			let tags = await getClaims(claims);

			return {
				label: labels?.en?.value,
				description: descriptions?.en?.value,
				tags
			};
		}

		return { labels, descriptions, claims };
	}

	async function getClaims(claims) {
		let result = Object.entries(claims).map(([,value]) => value[0].mainsnak.datavalue).filter(({ type }) => "wikibase-entityid" === type);
		console.log(result);
		let presult = result.slice(0, 3).map(async ({ value: { id } }) => await getEntities(id));
		let r = await Promise.all(presult);
		r = r.map(({ labels: { en: { value } } }) => value);
		console.log(r);
		return r;
	}

	const click_handler = tag => $$invalidate(0, word = tag);

	$$self.$$set = $$props => {
		if ("word" in $$props) $$invalidate(0, word = $$props.word);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*word*/ 1) {
			$: $$invalidate(1, entities = searchEntities(word).then(eid => {
				return getEntities(eid, 1);
			}));
		}
	};

	return [word, entities, click_handler];
}

class Wikidata extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { word: 0 });
	}
}

export default Wikidata;