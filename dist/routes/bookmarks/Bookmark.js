/* src/routes/bookmarks/Bookmark.svelte generated by Svelte v3.31.1 */
import {
	SvelteComponent,
	add_flush_callback,
	append,
	attr,
	bind,
	binding_callbacks,
	create_component,
	destroy_component,
	detach,
	element,
	handle_promise,
	init,
	insert,
	mount_component,
	noop,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "../../../web_modules/svelte/internal.js";

import { TargetIcon, LinkIcon, FolderIcon } from "../../../web_modules/svelte-feather-icons.js";
import InlineInput from "../../../web_modules/svelte-inline-input.js";
import chromeApi from "../../background/chrome-api.js";

function create_catch_block(ctx) {
	return {
		c: noop,
		m: noop,
		p: noop,
		i: noop,
		o: noop,
		d: noop
	};
}

// (44:32)      <span class="w-full inline-flex bg-gray-100">         <FolderIcon class="w-10 pr-2" size="1x" />         <InlineInput labelClasses="truncate " inputClasses="bg-gray-200 wrap" placeholder="parentId" value={parent?.title}
function create_then_block(ctx) {
	let span;
	let foldericon;
	let t;
	let inlineinput;
	let current;

	foldericon = new FolderIcon({
			props: { class: "w-10 pr-2", size: "1x" }
		});

	inlineinput = new InlineInput({
			props: {
				labelClasses: "truncate ",
				inputClasses: "bg-gray-200 wrap",
				placeholder: "parentId",
				value: /*parent*/ ctx[8]?.title
			}
		});

	return {
		c() {
			span = element("span");
			create_component(foldericon.$$.fragment);
			t = space();
			create_component(inlineinput.$$.fragment);
			attr(span, "class", "w-full inline-flex bg-gray-100");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			mount_component(foldericon, span, null);
			append(span, t);
			mount_component(inlineinput, span, null);
			current = true;
		},
		p(ctx, dirty) {
			const inlineinput_changes = {};
			if (dirty & /*pParent*/ 4) inlineinput_changes.value = /*parent*/ ctx[8]?.title;
			inlineinput.$set(inlineinput_changes);
		},
		i(local) {
			if (current) return;
			transition_in(foldericon.$$.fragment, local);
			transition_in(inlineinput.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(foldericon.$$.fragment, local);
			transition_out(inlineinput.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(span);
			destroy_component(foldericon);
			destroy_component(inlineinput);
		}
	};
}

// (1:0)  <script>     import {TargetIcon, LinkIcon, FolderIcon }
function create_pending_block(ctx) {
	return {
		c: noop,
		m: noop,
		p: noop,
		i: noop,
		o: noop,
		d: noop
	};
}

function create_fragment(ctx) {
	let div;
	let span0;
	let targeticon;
	let t0;
	let inlineinput0;
	let updating_value;
	let t1;
	let span1;
	let linkicon;
	let t2;
	let inlineinput1;
	let updating_value_1;
	let t3;
	let promise;
	let current;

	targeticon = new TargetIcon({
			props: { class: "w-10 pr-2", size: "1x" }
		});

	function inlineinput0_value_binding(value) {
		/*inlineinput0_value_binding*/ ctx[6].call(null, value);
	}

	let inlineinput0_props = {
		labelClasses: "truncate",
		inputClasses: "bg-gray-200 wrap",
		placeholder: "title"
	};

	if (/*title*/ ctx[0] !== void 0) {
		inlineinput0_props.value = /*title*/ ctx[0];
	}

	inlineinput0 = new InlineInput({ props: inlineinput0_props });
	binding_callbacks.push(() => bind(inlineinput0, "value", inlineinput0_value_binding));

	linkicon = new LinkIcon({
			props: { class: "w-10 pr-2", size: "1x" }
		});

	function inlineinput1_value_binding(value) {
		/*inlineinput1_value_binding*/ ctx[7].call(null, value);
	}

	let inlineinput1_props = {
		labelClasses: "truncate",
		inputClasses: "bg-gray-200 wrap",
		placeholder: "url"
	};

	if (/*url*/ ctx[1] !== void 0) {
		inlineinput1_props.value = /*url*/ ctx[1];
	}

	inlineinput1 = new InlineInput({ props: inlineinput1_props });
	binding_callbacks.push(() => bind(inlineinput1, "value", inlineinput1_value_binding));

	let info = {
		ctx,
		current: null,
		token: null,
		hasCatch: false,
		pending: create_pending_block,
		then: create_then_block,
		catch: create_catch_block,
		value: 8,
		blocks: [,,,]
	};

	handle_promise(promise = /*pParent*/ ctx[2], info);

	return {
		c() {
			div = element("div");
			span0 = element("span");
			create_component(targeticon.$$.fragment);
			t0 = space();
			create_component(inlineinput0.$$.fragment);
			t1 = space();
			span1 = element("span");
			create_component(linkicon.$$.fragment);
			t2 = space();
			create_component(inlineinput1.$$.fragment);
			t3 = space();
			info.block.c();
			attr(span0, "class", "w-full inline-flex bg-gray-100");
			attr(span1, "class", "w-full inline-flex bg-gray-100");
			attr(div, "class", "block m-2 w-full");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, span0);
			mount_component(targeticon, span0, null);
			append(span0, t0);
			mount_component(inlineinput0, span0, null);
			append(div, t1);
			append(div, span1);
			mount_component(linkicon, span1, null);
			append(span1, t2);
			mount_component(inlineinput1, span1, null);
			append(div, t3);
			info.block.m(div, info.anchor = null);
			info.mount = () => div;
			info.anchor = null;
			current = true;
		},
		p(new_ctx, [dirty]) {
			ctx = new_ctx;
			const inlineinput0_changes = {};

			if (!updating_value && dirty & /*title*/ 1) {
				updating_value = true;
				inlineinput0_changes.value = /*title*/ ctx[0];
				add_flush_callback(() => updating_value = false);
			}

			inlineinput0.$set(inlineinput0_changes);
			const inlineinput1_changes = {};

			if (!updating_value_1 && dirty & /*url*/ 2) {
				updating_value_1 = true;
				inlineinput1_changes.value = /*url*/ ctx[1];
				add_flush_callback(() => updating_value_1 = false);
			}

			inlineinput1.$set(inlineinput1_changes);
			info.ctx = ctx;

			if (dirty & /*pParent*/ 4 && promise !== (promise = /*pParent*/ ctx[2]) && handle_promise(promise, info)) {
				
			} else {
				const child_ctx = ctx.slice();
				child_ctx[8] = info.resolved;
				info.block.p(child_ctx, dirty);
			}
		},
		i(local) {
			if (current) return;
			transition_in(targeticon.$$.fragment, local);
			transition_in(inlineinput0.$$.fragment, local);
			transition_in(linkicon.$$.fragment, local);
			transition_in(inlineinput1.$$.fragment, local);
			transition_in(info.block);
			current = true;
		},
		o(local) {
			transition_out(targeticon.$$.fragment, local);
			transition_out(inlineinput0.$$.fragment, local);
			transition_out(linkicon.$$.fragment, local);
			transition_out(inlineinput1.$$.fragment, local);

			for (let i = 0; i < 3; i += 1) {
				const block = info.blocks[i];
				transition_out(block);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(targeticon);
			destroy_component(inlineinput0);
			destroy_component(linkicon);
			destroy_component(inlineinput1);
			info.block.d();
			info.token = null;
			info = null;
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let pParent;
	let { id } = $$props;
	let { title } = $$props;
	let { url } = $$props;
	let { parentId } = $$props;
	let result;

	function inlineinput0_value_binding(value) {
		title = value;
		$$invalidate(0, title);
	}

	function inlineinput1_value_binding(value) {
		url = value;
		$$invalidate(1, url);
	}

	$$self.$$set = $$props => {
		if ("id" in $$props) $$invalidate(3, id = $$props.id);
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("url" in $$props) $$invalidate(1, url = $$props.url);
		if ("parentId" in $$props) $$invalidate(4, parentId = $$props.parentId);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*id, title, url, result*/ 43) {
			$: {
				$$invalidate(5, result = !!id && chromeApi.bookmarks.update(id, { title, url }));
				console.log("updated", result);
			}
		}

		if ($$self.$$.dirty & /*parentId*/ 16) {
			$: $$invalidate(2, pParent = !!parentId && chromeApi.bookmarks.get(parentId).then(x => x[0]));
		}
	};

	return [
		title,
		url,
		pParent,
		id,
		parentId,
		result,
		inlineinput0_value_binding,
		inlineinput1_value_binding
	];
}

class Bookmark extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { id: 3, title: 0, url: 1, parentId: 4 });
	}
}

export default Bookmark;