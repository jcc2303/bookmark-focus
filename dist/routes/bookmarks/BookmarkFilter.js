/* src/routes/bookmarks/BookmarkFilter.svelte generated by Svelte v3.31.1 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	component_subscribe,
	create_component,
	destroy_component,
	detach,
	element,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	noop,
	safe_not_equal,
	set_input_value,
	set_store_value,
	space,
	transition_in,
	transition_out
} from "../../../web_modules/svelte/internal.js";

import { SearchIcon, XSquareIcon } from "../../../web_modules/svelte-feather-icons.js";
import InlineInput from "../../../web_modules/svelte-inline-input.js";
import { filter } from "../../stores.js";
import chromeApi from "../../background/chrome-api.js";

function create_if_block(ctx) {
	let button;
	let xsquareicon;
	let current;
	let mounted;
	let dispose;
	xsquareicon = new XSquareIcon({ props: { size: "1x" } });

	return {
		c() {
			button = element("button");
			create_component(xsquareicon.$$.fragment);
			attr(button, "class", "flex px-1 rounded-sm");
		},
		m(target, anchor) {
			insert(target, button, anchor);
			mount_component(xsquareicon, button, null);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", /*click_handler*/ ctx[2]);
				mounted = true;
			}
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(xsquareicon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(xsquareicon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			destroy_component(xsquareicon);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let span;
	let searchicon;
	let t0;
	let input;
	let t1;
	let current;
	let mounted;
	let dispose;

	searchicon = new SearchIcon({
			props: { class: "w-10 ml-1 pr-2", size: "1x" }
		});

	let if_block = /*value*/ ctx[0] && create_if_block(ctx);

	return {
		c() {
			span = element("span");
			create_component(searchicon.$$.fragment);
			t0 = space();
			input = element("input");
			t1 = space();
			if (if_block) if_block.c();
			attr(input, "class", "bg-gray-200 w-full h-5 focus:border-transparent");
			attr(span, "class", "group flex w-full h-6 items-center bg-gray-200 rounded-md border focus-within:border-gray-600");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			mount_component(searchicon, span, null);
			append(span, t0);
			append(span, input);
			set_input_value(input, /*value*/ ctx[0]);
			append(span, t1);
			if (if_block) if_block.m(span, null);
			current = true;

			if (!mounted) {
				dispose = listen(input, "input", /*input_input_handler*/ ctx[1]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*value*/ 1 && input.value !== /*value*/ ctx[0]) {
				set_input_value(input, /*value*/ ctx[0]);
			}

			if (/*value*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*value*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(span, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(searchicon.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(searchicon.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(span);
			destroy_component(searchicon);
			if (if_block) if_block.d();
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $filter;
	component_subscribe($$self, filter, $$value => $$invalidate(3, $filter = $$value));
	let value = $filter;

	// filter.set(value.toLowerCase())
	filter.subscribe(v => $$invalidate(0, value = v.toLowerCase()));

	function input_input_handler() {
		value = this.value;
		$$invalidate(0, value);
	}

	const click_handler = () => $$invalidate(0, value = "");

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*value*/ 1) {
			$: set_store_value(filter, $filter = value.toLowerCase(), $filter);
		}
	};

	return [value, input_input_handler, click_handler];
}

class BookmarkFilter extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default BookmarkFilter;