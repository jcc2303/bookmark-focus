/* src/routes/bookmarks/AddBookmark.svelte generated by Svelte v3.31.1 */
import {
	SvelteComponent,
	append,
	attr,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	set_data,
	space,
	text
} from "../../../web_modules/svelte/internal.js";

import { onMount } from "../../../web_modules/svelte.js";
import chromeApi from "../../background/chrome-api.js";

function create_if_block(ctx) {
	let div2;
	let div0;
	let span0;
	let t0;
	let t1;
	let div1;
	let span1;
	let input;
	let t2;
	let mounted;
	let dispose;
	let if_block = /*folder*/ ctx[1] && create_if_block_1(ctx);

	return {
		c() {
			div2 = element("div");
			div0 = element("div");
			span0 = element("span");
			t0 = text(/*url*/ ctx[3]);
			t1 = space();
			div1 = element("div");
			span1 = element("span");
			input = element("input");
			t2 = space();
			if (if_block) if_block.c();
			attr(div0, "class", "text-xs");
			attr(input, "class", "bg-gray-200 w-full h-5 focus:border-transparent");
			input.value = /*title*/ ctx[2];
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div0);
			append(div0, span0);
			append(span0, t0);
			append(div2, t1);
			append(div2, div1);
			append(div1, span1);
			append(span1, input);
			append(div2, t2);
			if (if_block) if_block.m(div2, null);

			if (!mounted) {
				dispose = listen(input, "change", /*change_handler*/ ctx[7]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*url*/ 8) set_data(t0, /*url*/ ctx[3]);

			if (dirty & /*title*/ 4 && input.value !== /*title*/ ctx[2]) {
				input.value = /*title*/ ctx[2];
			}

			if (/*folder*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					if_block.m(div2, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (detaching) detach(div2);
			if (if_block) if_block.d();
			mounted = false;
			dispose();
		}
	};
}

// (76:8) {#if folder}
function create_if_block_1(ctx) {
	let div1;
	let div0;
	let span;
	let t_value = /*folder*/ ctx[1].title + "";
	let t;

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			span = element("span");
			t = text(t_value);
			attr(div0, "class", "text-xs");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, span);
			append(span, t);
		},
		p(ctx, dirty) {
			if (dirty & /*folder*/ 2 && t_value !== (t_value = /*folder*/ ctx[1].title + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(div1);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let span;
	let t1;
	let if_block = /*bookmark*/ ctx[0] && create_if_block(ctx);

	return {
		c() {
			div = element("div");
			span = element("span");
			span.textContent = "Bookmark Added";
			t1 = space();
			if (if_block) if_block.c();
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, span);
			append(div, t1);
			if (if_block) if_block.m(div, null);
		},
		p(ctx, [dirty]) {
			if (/*bookmark*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(div, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let tabs = [];
	let tab;
	let bookmark;
	let folder;
	let title, url, folderId = 2;

	const getBookmark = async (currentTab = {}) => {
		console.log("getBookmark", currentTab);
		let searchResult = await chromeApi.bookmarks.search({ url: currentTab.url });
		return searchResult && searchResult[0];
	};

	async function create(currentTab) {
		console.log("create", currentTab);

		// check if already exist
		$$invalidate(0, bookmark = await chromeApi.bookmarks.create({
			"parentId": `${folderId}`,
			"title": currentTab.title,
			"url": currentTab.url
		}));
	}

	async function change({ target: { value } }) {
		console.log("change", value);
		let result = await chromeApi.bookmarks.update(bookmark.id, { title: value });
		console.log(result);
	}

	onMount(async () => {
		tabs = await chromeApi.tabs.query({ active: true }); // on dev: should be the second last used
		console.log("tabs", tabs);
		$$invalidate(5, tab = tabs && tabs[0]);
	});

	const change_handler = e => change(e);

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*tab*/ 32) {
			$: if (tab) {
				console.log("tab", tab);

				getBookmark(tab).then(found => {
					console.log("getBookmark.then", found);
					if (found) $$invalidate(0, bookmark = found); else create(tab);
				});
			}
		}

		if ($$self.$$.dirty & /*bookmark*/ 1) {
			$: if (bookmark) {
				console.log("bookmark", bookmark);
				$$invalidate(2, title = bookmark.title);
				$$invalidate(3, url = bookmark.url);
				$$invalidate(6, folderId = bookmark.parentId);
			}
		}

		if ($$self.$$.dirty & /*folderId*/ 64) {
			$: if (folderId) {
				chromeApi.bookmarks.get(folderId).then(f => f && $$invalidate(1, folder = f[0]));
			}
		}
	};

	return [bookmark, folder, title, url, change, tab, folderId, change_handler];
}

class AddBookmark extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default AddBookmark;