/* src/routes/bookmarks/Prediction.svelte generated by Svelte v3.31.1 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	create_component,
	destroy_component,
	detach,
	element,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	noop,
	outro_and_destroy_block,
	safe_not_equal,
	set_data,
	set_style,
	space,
	text,
	transition_in,
	transition_out,
	update_keyed_each
} from "../../../web_modules/svelte/internal.js";

import { FolderIcon } from "../../../web_modules/svelte-feather-icons.js";
import chromeApi from "../../background/chrome-api.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i].tag[0];
	child_ctx[7] = list[i].tag[1];
	child_ctx[8] = list[i].percentage;
	child_ctx[10] = i;
	return child_ctx;
}

// (44:4) {#if link}
function create_if_block_1(ctx) {
	let a;
	let span;
	let a_href_value;

	return {
		c() {
			a = element("a");
			span = element("span");
			span.textContent = `${/*link*/ ctx[2].title}`;
			attr(span, "class", "truncate");
			attr(a, "href", a_href_value = /*link*/ ctx[2].url);
			attr(a, "class", "flex");
			attr(a, "target", "_blank");
		},
		m(target, anchor) {
			insert(target, a, anchor);
			append(a, span);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(a);
		}
	};
}

// (51:8) {#if parent }
function create_if_block(ctx) {
	let div1;
	let div0;
	let foldericon;
	let t0;
	let span;
	let t1_value = /*parent*/ ctx[0].title + "";
	let t1;
	let current;
	foldericon = new FolderIcon({ props: { size: "1x" } });

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			create_component(foldericon.$$.fragment);
			t0 = space();
			span = element("span");
			t1 = text(t1_value);
			attr(span, "class", "text-blue-800 px-1");
			attr(div0, "class", "flex");
			attr(div1, "class", "flex items-center justify-between");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			mount_component(foldericon, div0, null);
			append(div0, t0);
			append(div0, span);
			append(span, t1);
			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty & /*parent*/ 1) && t1_value !== (t1_value = /*parent*/ ctx[0].title + "")) set_data(t1, t1_value);
		},
		i(local) {
			if (current) return;
			transition_in(foldericon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(foldericon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(foldericon);
		}
	};
}

// (60:8) {#each confidences.map(([tag,percentage]) => ({tag:tag.split('_'),percentage})) as {tag:[parentId, tag],percentage}
function create_each_block(key_1, ctx) {
	let li;
	let button;
	let span0;
	let foldericon;
	let t0;
	let span1;
	let t1_value = /*tag*/ ctx[7] + "";
	let t1;
	let t2;
	let current;
	let mounted;
	let dispose;

	foldericon = new FolderIcon({
			props: {
				size: "1x",
				class: "stroke-current mx-1 text-blue-300"
			}
		});

	function click_handler() {
		return /*click_handler*/ ctx[5](/*parentId*/ ctx[6]);
	}

	return {
		key: key_1,
		first: null,
		c() {
			li = element("li");
			button = element("button");
			span0 = element("span");
			create_component(foldericon.$$.fragment);
			t0 = space();
			span1 = element("span");
			t1 = text(t1_value);
			t2 = space();
			attr(span0, "class", "flex rounded-full justify-center place-content-center mr-1");
			set_style(span0, "background-color", perc2color(/*percentage*/ ctx[8]));
			attr(button, "class", "bg-gray-400 hover:bg-gray-400 text-white px-1 rounded inline-flex items-center ");
			attr(li, "class", "flex justify-between items-center m-0 p-0 truncate");
			this.first = li;
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, button);
			append(button, span0);
			mount_component(foldericon, span0, null);
			append(button, t0);
			append(button, span1);
			append(span1, t1);
			append(li, t2);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", click_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
		},
		i(local) {
			if (current) return;
			transition_in(foldericon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(foldericon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			destroy_component(foldericon);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let div1;
	let t0;
	let div0;
	let t1;
	let ul;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let current;
	let if_block0 = /*link*/ ctx[2] && create_if_block_1(ctx);
	let if_block1 = /*parent*/ ctx[0] && create_if_block(ctx);
	let each_value = /*confidences*/ ctx[1].map(func);
	const get_key = ctx => /*parentId*/ ctx[6];

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	return {
		c() {
			div1 = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			div0 = element("div");
			if (if_block1) if_block1.c();
			t1 = space();
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(ul, "class", "flex float-right m-0 style-none pl-2 select-none w-full");
			attr(div0, "class", "flex justify-between items-center m-0 p-0 truncate");
			attr(div1, "class", "text-xs");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			if (if_block0) if_block0.m(div1, null);
			append(div1, t0);
			append(div1, div0);
			if (if_block1) if_block1.m(div0, null);
			append(div0, t1);
			append(div0, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (/*link*/ ctx[2]) if_block0.p(ctx, dirty);

			if (/*parent*/ ctx[0]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*parent*/ 1) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div0, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (dirty & /*move, confidences, perc2color*/ 10) {
				each_value = /*confidences*/ ctx[1].map(func);
				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, ul, outro_and_destroy_block, create_each_block, null, get_each_context);
				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block1);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			transition_out(if_block1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}
		}
	};
}

function perc2color(perc) {
	perc = perc * 100;
	var r, g, b = 0;

	if (perc < 50) {
		r = 255;
		g = Math.round(5.1 * perc);
	} else {
		g = 255;
		r = Math.round(510 - 5.1 * perc);
	}

	var h = r * 65536 + g * 256 + b * 1;
	return "#" + ("000000" + h.toString(16)).slice(-6);
}

const func = ([tag, percentage]) => ({ tag: tag.split("_"), percentage });

function instance($$self, $$props, $$invalidate) {
	let { prediction = {} } = $$props;
	let { confidences = [], link } = prediction;
	let parent;

	function move(parentId) {
		if (link.parentId) chromeApi.bookmarks.move(link.id, { parentId }); else chromeApi.bookmarks.create({
			"parentId": `${parentId}`,
			"title": link.title,
			"url": link.url
		});
	}

	const click_handler = parentId => move(parentId);

	$$self.$$set = $$props => {
		if ("prediction" in $$props) $$invalidate(4, prediction = $$props.prediction);
	};

	$: if (link && link.parentId) {
		chromeApi.bookmarks.get(link.parentId).then(p => p && $$invalidate(0, parent = p[0]));
	}

	return [parent, confidences, link, move, prediction, click_handler];
}

class Prediction extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { prediction: 4 });
	}
}

export default Prediction;