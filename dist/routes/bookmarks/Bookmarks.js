/* src/routes/bookmarks/Bookmarks.svelte generated by Svelte v3.31.1 */
import {
	SvelteComponent,
	assign,
	attr,
	check_outros,
	component_subscribe,
	create_component,
	destroy_component,
	detach,
	element,
	empty,
	get_spread_object,
	get_spread_update,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "../../../web_modules/svelte/internal.js";

import { onMount } from "../../../web_modules/svelte.js";
import { ArrowLeftIcon } from "../../../web_modules/svelte-feather-icons.js";
import { parse } from "../../../web_modules/qs.js";
import { location, querystring } from "../../../web_modules/svelte-spa-router.js";
import Bookmark from "./Bookmark.js";
import chromeApi from "../../background/chrome-api.js";

function create_if_block(ctx) {
	let bookmark;
	let current;
	const bookmark_spread_levels = [/*current*/ ctx[0]];
	let bookmark_props = {};

	for (let i = 0; i < bookmark_spread_levels.length; i += 1) {
		bookmark_props = assign(bookmark_props, bookmark_spread_levels[i]);
	}

	bookmark = new Bookmark({ props: bookmark_props });

	return {
		c() {
			create_component(bookmark.$$.fragment);
		},
		m(target, anchor) {
			mount_component(bookmark, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const bookmark_changes = (dirty & /*current*/ 1)
			? get_spread_update(bookmark_spread_levels, [get_spread_object(/*current*/ ctx[0])])
			: {};

			bookmark.$set(bookmark_changes);
		},
		i(local) {
			if (current) return;
			transition_in(bookmark.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(bookmark.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(bookmark, detaching);
		}
	};
}

function create_fragment(ctx) {
	let a;
	let arrowlefticon;
	let t;
	let if_block_anchor;
	let current;
	arrowlefticon = new ArrowLeftIcon({ props: { size: "1x" } });
	let if_block = /*current*/ ctx[0] && create_if_block(ctx);

	return {
		c() {
			a = element("a");
			create_component(arrowlefticon.$$.fragment);
			t = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			attr(a, "href", "#/");
		},
		m(target, anchor) {
			insert(target, a, anchor);
			mount_component(arrowlefticon, a, null);
			insert(target, t, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*current*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*current*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(arrowlefticon.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(arrowlefticon.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(a);
			destroy_component(arrowlefticon);
			if (detaching) detach(t);
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $querystring;
	component_subscribe($$self, querystring, $$value => $$invalidate(1, $querystring = $$value));
	let current;

	const tabData = async () => {
		let currentTab = await chromeApi.tabs.getSelected();
		let searchResult = await chromeApi.bookmarks.search({ url: currentTab.url });
		console.log(searchResult);

		if (!!searchResult.length) {
			$$invalidate(0, current = searchResult[0]);
		} else {
			console.log("creating a bookmark");
			let parsed = parse($querystring);
			let folderId = !!parsed.folderId && parsed.folderId || "1";

			$$invalidate(0, current = await chromeApi.bookmarks.create({
				"parentId": `${folderId}`,
				"title": currentTab.title,
				"url": currentTab.url
			}));
		}
	};

	onMount(() => {
		tabData();
	});

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*current*/ 1) {
			$: if (current) {
				console.log("complete current", current);
			}
		}
	};

	return [current];
}

class Bookmarks extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Bookmarks;