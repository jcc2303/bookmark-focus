/* src/routes/folders/FolderAction.svelte generated by Svelte v3.31.1 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	component_subscribe,
	create_component,
	destroy_component,
	detach,
	element,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	noop,
	run_all,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "../../../web_modules/svelte/internal.js";

import { createEventDispatcher } from "../../../web_modules/svelte.js";

import {
	EditIcon,
	FolderPlusIcon,
	StarIcon,
	BookmarkIcon,
	ShuffleIcon,
	CrosshairIcon,
	EyeIcon,
	ExternalLinkIcon,
	BookIcon
} from "../../../web_modules/svelte-feather-icons.js";

import chromeApi from "../../background/chrome-api.js";
import { focused } from "../../stores.js";

function create_else_block(ctx) {
	let span;
	let crosshairicon;
	let current;
	let mounted;
	let dispose;
	crosshairicon = new CrosshairIcon({ props: { size: "1x" } });

	return {
		c() {
			span = element("span");
			create_component(crosshairicon.$$.fragment);
			attr(span, "class", "group-hover:opacity-100 opacity-0");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			mount_component(crosshairicon, span, null);
			current = true;

			if (!mounted) {
				dispose = listen(span, "click", /*click_handler_1*/ ctx[4]);
				mounted = true;
			}
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(crosshairicon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(crosshairicon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(span);
			destroy_component(crosshairicon);
			mounted = false;
			dispose();
		}
	};
}

// (36:4) {#if isShuffled }
function create_if_block(ctx) {
	let span;
	let shuffleicon;
	let current;
	let mounted;
	let dispose;
	shuffleicon = new ShuffleIcon({ props: { size: "1x" } });

	return {
		c() {
			span = element("span");
			create_component(shuffleicon.$$.fragment);
			attr(span, "class", "group-hover:opacity-100");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			mount_component(shuffleicon, span, null);
			current = true;

			if (!mounted) {
				dispose = listen(span, "click", /*click_handler*/ ctx[3]);
				mounted = true;
			}
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(shuffleicon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(shuffleicon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(span);
			destroy_component(shuffleicon);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let span3;
	let current_block_type_index;
	let if_block;
	let t0;
	let span0;
	let eyeicon;
	let t1;
	let span1;
	let externallinkicon;
	let t2;
	let span2;
	let bookicon;
	let current;
	let mounted;
	let dispose;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*isShuffled*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	eyeicon = new EyeIcon({ props: { size: "1x" } });
	externallinkicon = new ExternalLinkIcon({ props: { size: "1x" } });
	bookicon = new BookIcon({ props: { size: "1x" } });

	return {
		c() {
			span3 = element("span");
			if_block.c();
			t0 = space();
			span0 = element("span");
			create_component(eyeicon.$$.fragment);
			t1 = space();
			span1 = element("span");
			create_component(externallinkicon.$$.fragment);
			t2 = space();
			span2 = element("span");
			create_component(bookicon.$$.fragment);
			attr(span0, "class", "opacity-0 group-hover:opacity-100");
			attr(span1, "class", "opacity-0 group-hover:opacity-100");
			attr(span2, "class", "opacity-0 group-hover:opacity-100");
			attr(span3, "class", "flex");
		},
		m(target, anchor) {
			insert(target, span3, anchor);
			if_blocks[current_block_type_index].m(span3, null);
			append(span3, t0);
			append(span3, span0);
			mount_component(eyeicon, span0, null);
			append(span3, t1);
			append(span3, span1);
			mount_component(externallinkicon, span1, null);
			append(span3, t2);
			append(span3, span2);
			mount_component(bookicon, span2, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(span0, "click", /*click_handler_2*/ ctx[5]),
					listen(span1, "click", /*click_handler_3*/ ctx[6]),
					listen(span2, "click", /*click_handler_4*/ ctx[7])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(span3, t0);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(eyeicon.$$.fragment, local);
			transition_in(externallinkicon.$$.fragment, local);
			transition_in(bookicon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			transition_out(eyeicon.$$.fragment, local);
			transition_out(externallinkicon.$$.fragment, local);
			transition_out(bookicon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(span3);
			if_blocks[current_block_type_index].d();
			destroy_component(eyeicon);
			destroy_component(externallinkicon);
			destroy_component(bookicon);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $focused;
	component_subscribe($$self, focused, $$value => $$invalidate(8, $focused = $$value));
	const dispatch = createEventDispatcher();
	let { id } = $$props;
	let isShuffled = false;
	focused.subscribe(val => $$invalidate(0, isShuffled = $focused && $focused.id == id || false));
	const click_handler = () => dispatch("toggleFocus");
	const click_handler_1 = () => dispatch("toggleFocus");
	const click_handler_2 = () => dispatch("overviewit");
	const click_handler_3 = () => dispatch("openOverride");
	const click_handler_4 = () => dispatch("openBookmark");

	$$self.$$set = $$props => {
		if ("id" in $$props) $$invalidate(2, id = $$props.id);
	};

	return [
		isShuffled,
		dispatch,
		id,
		click_handler,
		click_handler_1,
		click_handler_2,
		click_handler_3,
		click_handler_4
	];
}

class FolderAction extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { id: 2 });
	}
}

export default FolderAction;