/* src/routes/folders/Folder.svelte generated by Svelte v3.31.1 */
import {
	SvelteComponent,
	add_flush_callback,
	append,
	attr,
	bind,
	binding_callbacks,
	check_outros,
	create_component,
	destroy_component,
	detach,
	element,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "../../../web_modules/svelte/internal.js";

import { TargetIcon, FolderIcon } from "../../../web_modules/svelte-feather-icons.js";
import InlineInput from "../../../web_modules/svelte-inline-input.js";
import chromeApi from "../../background/chrome-api.js";

function create_if_block(ctx) {
	let span;
	let foldericon;
	let t;
	let inlineinput;
	let current;

	foldericon = new FolderIcon({
			props: { class: "w-10 pr-2", size: "1x" }
		});

	inlineinput = new InlineInput({
			props: {
				labelClasses: "truncate ",
				inputClasses: "bg-gray-200 wrap",
				placeholder: "parentId",
				value: /*parent*/ ctx[1].title
			}
		});

	return {
		c() {
			span = element("span");
			create_component(foldericon.$$.fragment);
			t = space();
			create_component(inlineinput.$$.fragment);
			attr(span, "class", "w-full inline-flex bg-gray-100");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			mount_component(foldericon, span, null);
			append(span, t);
			mount_component(inlineinput, span, null);
			current = true;
		},
		p(ctx, dirty) {
			const inlineinput_changes = {};
			if (dirty & /*parent*/ 2) inlineinput_changes.value = /*parent*/ ctx[1].title;
			inlineinput.$set(inlineinput_changes);
		},
		i(local) {
			if (current) return;
			transition_in(foldericon.$$.fragment, local);
			transition_in(inlineinput.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(foldericon.$$.fragment, local);
			transition_out(inlineinput.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(span);
			destroy_component(foldericon);
			destroy_component(inlineinput);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let span;
	let targeticon;
	let t0;
	let inlineinput;
	let updating_value;
	let span_class_value;
	let t1;
	let current;

	targeticon = new TargetIcon({
			props: { class: "w-10 pr-2", size: "1x" }
		});

	function inlineinput_value_binding(value) {
		/*inlineinput_value_binding*/ ctx[6].call(null, value);
	}

	let inlineinput_props = {
		labelClasses: "truncate",
		inputClasses: "bg-gray-200 wrap",
		placeholder: "title"
	};

	if (/*title*/ ctx[0] !== void 0) {
		inlineinput_props.value = /*title*/ ctx[0];
	}

	inlineinput = new InlineInput({ props: inlineinput_props });
	binding_callbacks.push(() => bind(inlineinput, "value", inlineinput_value_binding));
	let if_block = /*parent*/ ctx[1] && create_if_block(ctx);

	return {
		c() {
			div = element("div");
			span = element("span");
			create_component(targeticon.$$.fragment);
			t0 = space();
			create_component(inlineinput.$$.fragment);
			t1 = space();
			if (if_block) if_block.c();
			attr(span, "class", span_class_value = "w-full inline-flex bg-gray-100 " + (/*title*/ ctx[0] ? "" : "border border-red-400"));
			attr(div, "class", "block m-2 w-full");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, span);
			mount_component(targeticon, span, null);
			append(span, t0);
			mount_component(inlineinput, span, null);
			append(div, t1);
			if (if_block) if_block.m(div, null);
			current = true;
		},
		p(ctx, [dirty]) {
			const inlineinput_changes = {};

			if (!updating_value && dirty & /*title*/ 1) {
				updating_value = true;
				inlineinput_changes.value = /*title*/ ctx[0];
				add_flush_callback(() => updating_value = false);
			}

			inlineinput.$set(inlineinput_changes);

			if (!current || dirty & /*title*/ 1 && span_class_value !== (span_class_value = "w-full inline-flex bg-gray-100 " + (/*title*/ ctx[0] ? "" : "border border-red-400"))) {
				attr(span, "class", span_class_value);
			}

			if (/*parent*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*parent*/ 2) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(targeticon.$$.fragment, local);
			transition_in(inlineinput.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(targeticon.$$.fragment, local);
			transition_out(inlineinput.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(targeticon);
			destroy_component(inlineinput);
			if (if_block) if_block.d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { id } = $$props;
	let { title } = $$props;
	let { parentId } = $$props;
	let { children = [] } = $$props;
	let result;
	let parent;

	async function getFolder(parentId) {
		$$invalidate(1, parent = (await chromeApi.bookmarks.get(parentId))[0]);
	}

	function inlineinput_value_binding(value) {
		title = value;
		$$invalidate(0, title);
	}

	$$self.$$set = $$props => {
		if ("id" in $$props) $$invalidate(2, id = $$props.id);
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("parentId" in $$props) $$invalidate(3, parentId = $$props.parentId);
		if ("children" in $$props) $$invalidate(4, children = $$props.children);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*id, title, result*/ 37) {
			$: {
				$$invalidate(5, result = !!id && chromeApi.bookmarks.update(id, { title }));
				console.log("updated", result);
			}
		}

		if ($$self.$$.dirty & /*parentId*/ 8) {
			$: if (parentId) {
				console.log("parentId", parentId);
				getFolder(parentId);
			}
		}
	};

	return [title, parent, id, parentId, children, result, inlineinput_value_binding];
}

class Folder extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			id: 2,
			title: 0,
			parentId: 3,
			children: 4
		});
	}
}

export default Folder;