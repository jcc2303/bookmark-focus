/* src/routes/folders/FolderFilter.svelte generated by Svelte v3.31.1 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	create_component,
	destroy_component,
	detach,
	element,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	noop,
	safe_not_equal,
	set_input_value,
	space,
	transition_in,
	transition_out
} from "../../../web_modules/svelte/internal.js";

import { FolderIcon, FilterIcon, XSquareIcon } from "../../../web_modules/svelte-feather-icons.js";
import InlineInput from "../../../web_modules/svelte-inline-input.js";

function create_else_block(ctx) {
	let filtericon;
	let current;

	filtericon = new FilterIcon({
			props: { class: "w-10 pr-2", size: "1x" }
		});

	return {
		c() {
			create_component(filtericon.$$.fragment);
		},
		m(target, anchor) {
			mount_component(filtericon, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(filtericon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(filtericon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(filtericon, detaching);
		}
	};
}

// (16:6) {#if !!value}
function create_if_block_1(ctx) {
	let button;
	let foldericon;
	let current;
	let mounted;
	let dispose;
	foldericon = new FolderIcon({ props: { size: "1x" } });

	return {
		c() {
			button = element("button");
			create_component(foldericon.$$.fragment);
			attr(button, "class", "w-10 pr-2 flex rounded-sm");
		},
		m(target, anchor) {
			insert(target, button, anchor);
			mount_component(foldericon, button, null);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", createFolder);
				mounted = true;
			}
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(foldericon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(foldericon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			destroy_component(foldericon);
			mounted = false;
			dispose();
		}
	};
}

// (24:6) {#if value}
function create_if_block(ctx) {
	let button;
	let xsquareicon;
	let current;
	let mounted;
	let dispose;
	xsquareicon = new XSquareIcon({ props: { size: "1x" } });

	return {
		c() {
			button = element("button");
			create_component(xsquareicon.$$.fragment);
			attr(button, "class", "flex px-1 rounded-sm");
		},
		m(target, anchor) {
			insert(target, button, anchor);
			mount_component(xsquareicon, button, null);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", /*click_handler*/ ctx[2]);
				mounted = true;
			}
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(xsquareicon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(xsquareicon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			destroy_component(xsquareicon);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let span1;
	let span0;
	let current_block_type_index;
	let if_block0;
	let t0;
	let input;
	let t1;
	let current;
	let mounted;
	let dispose;
	const if_block_creators = [create_if_block_1, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (!!/*value*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	let if_block1 = /*value*/ ctx[0] && create_if_block(ctx);

	return {
		c() {
			span1 = element("span");
			span0 = element("span");
			if_block0.c();
			t0 = space();
			input = element("input");
			t1 = space();
			if (if_block1) if_block1.c();
			attr(input, "class", "bg-gray-200 w-full h-5 focus:border-transparent mx-1");
			attr(span0, "class", "group flex h-6 items-center w-full bg-gray-200 rounded-md border focus-within:border-gray-600");
			attr(span1, "class", "flex p-2");
		},
		m(target, anchor) {
			insert(target, span1, anchor);
			append(span1, span0);
			if_blocks[current_block_type_index].m(span0, null);
			append(span0, t0);
			append(span0, input);
			set_input_value(input, /*value*/ ctx[0]);
			append(span0, t1);
			if (if_block1) if_block1.m(span0, null);
			current = true;

			if (!mounted) {
				dispose = listen(input, "input", /*input_input_handler*/ ctx[1]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block0 = if_blocks[current_block_type_index];

				if (!if_block0) {
					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block0.c();
				} else {
					if_block0.p(ctx, dirty);
				}

				transition_in(if_block0, 1);
				if_block0.m(span0, t0);
			}

			if (dirty & /*value*/ 1 && input.value !== /*value*/ ctx[0]) {
				set_input_value(input, /*value*/ ctx[0]);
			}

			if (/*value*/ ctx[0]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*value*/ 1) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(span0, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(span1);
			if_blocks[current_block_type_index].d();
			if (if_block1) if_block1.d();
			mounted = false;
			dispose();
		}
	};
}

async function createFolder() {
	dispatch("createFolder");
}

function instance($$self, $$props, $$invalidate) {
	let { value = "" } = $$props;

	function input_input_handler() {
		value = this.value;
		$$invalidate(0, value);
	}

	const click_handler = () => $$invalidate(0, value = "");

	$$self.$$set = $$props => {
		if ("value" in $$props) $$invalidate(0, value = $$props.value);
	};

	return [value, input_input_handler, click_handler];
}

class FolderFilter extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { value: 0 });
	}
}

export default FolderFilter;