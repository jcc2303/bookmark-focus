/* src/routes/folders/Focused.svelte generated by Svelte v3.31.1 */
import {
	SvelteComponent,
	attr,
	check_outros,
	component_subscribe,
	create_component,
	destroy_component,
	detach,
	element,
	group_outros,
	init,
	insert,
	mount_component,
	noop,
	safe_not_equal,
	set_data,
	set_store_value,
	text,
	transition_in,
	transition_out
} from "../../../web_modules/svelte/internal.js";

import { onMount } from "../../../web_modules/svelte.js";
import { focused } from "../../stores.js";
import { HomeIcon, CrosshairIcon } from "../../../web_modules/svelte-feather-icons.js";
import chromeApi from "../../background/chrome-api.js";

function create_else_block(ctx) {
	let homeicon;
	let current;
	homeicon = new HomeIcon({ props: { size: "1x" } });

	return {
		c() {
			create_component(homeicon.$$.fragment);
		},
		m(target, anchor) {
			mount_component(homeicon, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(homeicon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(homeicon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(homeicon, detaching);
		}
	};
}

// (50:4) {#if $focused}
function create_if_block(ctx) {
	let crosshairicon;
	let t;
	let current;
	crosshairicon = new CrosshairIcon({ props: { size: "1x" } });

	return {
		c() {
			create_component(crosshairicon.$$.fragment);
			t = text(/*realTitle*/ ctx[1]);
		},
		m(target, anchor) {
			mount_component(crosshairicon, target, anchor);
			insert(target, t, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (!current || dirty & /*realTitle*/ 2) set_data(t, /*realTitle*/ ctx[1]);
		},
		i(local) {
			if (current) return;
			transition_in(crosshairicon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(crosshairicon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(crosshairicon, detaching);
			if (detaching) detach(t);
		}
	};
}

function create_fragment(ctx) {
	let span;
	let current_block_type_index;
	let if_block;
	let current;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*$focused*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			span = element("span");
			if_block.c();
			attr(span, "class", "flex px-1 border-2 rounded-sm right truncate items-center");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			if_blocks[current_block_type_index].m(span, null);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(span, null);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(span);
			if_blocks[current_block_type_index].d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $focused;
	component_subscribe($$self, focused, $$value => $$invalidate(0, $focused = $$value));
	let { refresh = {} } = $$props;
	let realTitle = "";

	// let r1 = await getFocused()
	// $folder = r1 && r1.length && r1[0] || null;
	onMount(() => reload());

	const reload = async () => {
		set_store_value(focused, $focused = await getFocused(), $focused);
	}; // console.log('Focused.reload', $focused);

	async function getFocused() {
		let r1 = await chromeApi.bookmarks.search({ title: "_BF-" }) || [];

		// console.log('focused?', r1);
		r1 = r1.filter(x => !x.url);

		return r1 && r1.length && r1[0] || null;
	}

	const extractFocusTitle = ({ title }) => {
		let wd = title.split("-");
		return wd && wd.length > 1 && wd[1] || "";
	};

	$$self.$$set = $$props => {
		if ("refresh" in $$props) $$invalidate(2, refresh = $$props.refresh);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$focused*/ 1) {
			$: if ($focused) {
				$$invalidate(1, realTitle = extractFocusTitle($focused));
			}
		}

		if ($$self.$$.dirty & /*refresh*/ 4) {
			$: if (refresh) {
				reload();
			}
		}
	};

	return [$focused, realTitle, refresh];
}

class Focused extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { refresh: 2 });
	}
}

export default Focused;