/* src/routes/analisys/Analisys.svelte generated by Svelte v3.31.1 */
import {
	SvelteComponent,
	add_flush_callback,
	append,
	attr,
	bind,
	binding_callbacks,
	check_outros,
	component_subscribe,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	safe_not_equal,
	set_data,
	set_store_value,
	space,
	text,
	transition_in,
	transition_out
} from "../../../web_modules/svelte/internal.js";

import { onMount } from "../../../web_modules/svelte.js";
import { BookIcon, TypeIcon, CpuIcon, ActivityIcon } from "../../../web_modules/svelte-feather-icons.js";
import chromeApi from "../../background/chrome-api.js";
import statsApi from "../../background/stats.js";
import { filter, overview, stats } from "../../stores.js";
import Wikidata from "../bookmarks/Wikidata.js";
import ClassifierTfjs from "../bookmarks/ClassifierTfjs.js";
import Prediction from "../bookmarks/Prediction.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[22] = list[i][0];
	child_ctx[23] = list[i][1];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[22] = list[i][0];
	child_ctx[23] = list[i][1];
	return child_ctx;
}

// (68:8) {#if tags.length}
function create_if_block(ctx) {
	let span2;
	let span0;
	let activityicon;
	let t0;
	let span1;
	let t1;
	let current;
	activityicon = new ActivityIcon({ props: { size: "1x" } });

	return {
		c() {
			span2 = element("span");
			span0 = element("span");
			create_component(activityicon.$$.fragment);
			t0 = space();
			span1 = element("span");
			t1 = text(/*title*/ ctx[1]);
			attr(span2, "class", "flex");
		},
		m(target, anchor) {
			insert(target, span2, anchor);
			append(span2, span0);
			mount_component(activityicon, span0, null);
			append(span2, t0);
			append(span2, span1);
			append(span1, t1);
			current = true;
		},
		p(ctx, dirty) {
			if (!current || dirty & /*title*/ 2) set_data(t1, /*title*/ ctx[1]);
		},
		i(local) {
			if (current) return;
			transition_in(activityicon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(activityicon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(span2);
			destroy_component(activityicon);
		}
	};
}

// (78:4) {#each tags.filter(([t,c]) => c > 2 ).slice(0, 6) as [tag, count]}
function create_each_block_1(ctx) {
	let button;
	let div;
	let typeicon;
	let t0;
	let span0;
	let t1_value = /*count*/ ctx[23] + "";
	let t1;
	let t2;
	let span1;
	let t3_value = /*tag*/ ctx[22] + "";
	let t3;
	let t4;
	let current;
	let mounted;
	let dispose;

	typeicon = new TypeIcon({
			props: {
				class: "stroke-current text-blue-300",
				size: "1.5x"
			}
		});

	function click_handler() {
		return /*click_handler*/ ctx[8](/*tag*/ ctx[22]);
	}

	return {
		c() {
			button = element("button");
			div = element("div");
			create_component(typeicon.$$.fragment);
			t0 = space();
			span0 = element("span");
			t1 = text(t1_value);
			t2 = space();
			span1 = element("span");
			t3 = text(t3_value);
			t4 = space();
			attr(span0, "class", "absolute text-blue-900 text-xs");
			attr(div, "class", "flex items-center justify-center rounded-full bg-gray-200");
			attr(span1, "class", "pl-1");
			attr(button, "class", "px-1 rounded-sm border bg-white border-blue-100 text-blue-600 flex");
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, div);
			mount_component(typeicon, div, null);
			append(div, t0);
			append(div, span0);
			append(span0, t1);
			append(button, t2);
			append(button, span1);
			append(span1, t3);
			append(button, t4);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", click_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if ((!current || dirty & /*tags*/ 4) && t1_value !== (t1_value = /*count*/ ctx[23] + "")) set_data(t1, t1_value);
			if ((!current || dirty & /*tags*/ 4) && t3_value !== (t3_value = /*tag*/ ctx[22] + "")) set_data(t3, t3_value);
		},
		i(local) {
			if (current) return;
			transition_in(typeicon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(typeicon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			destroy_component(typeicon);
			mounted = false;
			dispose();
		}
	};
}

// (90:4) {#each childrenTags.filter(([t,c]) => c > 2 ).slice(0, 20) as [tag, count]}
function create_each_block(ctx) {
	let button;
	let div;
	let typeicon;
	let t0;
	let span0;
	let t1_value = /*count*/ ctx[23] + "";
	let t1;
	let t2;
	let span1;
	let t3_value = /*tag*/ ctx[22] + "";
	let t3;
	let t4;
	let current;
	let mounted;
	let dispose;

	typeicon = new TypeIcon({
			props: {
				class: "stroke-current text-blue-300",
				size: "1.5x"
			}
		});

	function click_handler_1() {
		return /*click_handler_1*/ ctx[9](/*tag*/ ctx[22]);
	}

	return {
		c() {
			button = element("button");
			div = element("div");
			create_component(typeicon.$$.fragment);
			t0 = space();
			span0 = element("span");
			t1 = text(t1_value);
			t2 = space();
			span1 = element("span");
			t3 = text(t3_value);
			t4 = space();
			attr(span0, "class", "absolute text-blue-900 text-xs");
			attr(div, "class", "flex items-center justify-center rounded-full bg-gray-200");
			attr(span1, "class", "pl-1");
			attr(button, "class", "px-1 rounded-sm bg-white border border-blue-100 text-blue-300 flex");
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, div);
			mount_component(typeicon, div, null);
			append(div, t0);
			append(div, span0);
			append(span0, t1);
			append(button, t2);
			append(button, span1);
			append(span1, t3);
			append(button, t4);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", click_handler_1);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if ((!current || dirty & /*childrenTags*/ 8) && t1_value !== (t1_value = /*count*/ ctx[23] + "")) set_data(t1, t1_value);
			if ((!current || dirty & /*childrenTags*/ 8) && t3_value !== (t3_value = /*tag*/ ctx[22] + "")) set_data(t3, t3_value);
		},
		i(local) {
			if (current) return;
			transition_in(typeicon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(typeicon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			destroy_component(typeicon);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let div4;
	let div0;
	let t0;
	let div1;
	let t1;
	let div2;
	let t2;
	let div3;
	let wikidata;
	let updating_word;
	let t3;
	let div6;
	let current;
	let if_block = /*tags*/ ctx[2].length && create_if_block(ctx);
	let each_value_1 = /*tags*/ ctx[2].filter(func).slice(0, 6);
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const out = i => transition_out(each_blocks_1[i], 1, 1, () => {
		each_blocks_1[i] = null;
	});

	let each_value = /*childrenTags*/ ctx[3].filter(func_1).slice(0, 20);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out_1 = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	function wikidata_word_binding(value) {
		/*wikidata_word_binding*/ ctx[10].call(null, value);
	}

	let wikidata_props = { class: "right" };

	if (/*word*/ ctx[0] !== void 0) {
		wikidata_props.word = /*word*/ ctx[0];
	}

	wikidata = new Wikidata({ props: wikidata_props });
	binding_callbacks.push(() => bind(wikidata, "word", wikidata_word_binding));

	return {
		c() {
			div4 = element("div");
			div0 = element("div");
			if (if_block) if_block.c();
			t0 = space();
			div1 = element("div");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t1 = space();
			div2 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t2 = space();
			div3 = element("div");
			create_component(wikidata.$$.fragment);
			t3 = space();
			div6 = element("div");
			div6.innerHTML = `<div class="w-full"></div>`;
			attr(div0, "class", "bg-gray-100 flex items-baseline");
			attr(div1, "class", "w-full flex flex-wrap text-xs");
			attr(div2, "class", "w-full flex flex-wrap text-xs");
		},
		m(target, anchor) {
			insert(target, div4, anchor);
			append(div4, div0);
			if (if_block) if_block.m(div0, null);
			append(div4, t0);
			append(div4, div1);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(div1, null);
			}

			append(div4, t1);
			append(div4, div2);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div2, null);
			}

			append(div4, t2);
			append(div4, div3);
			mount_component(wikidata, div3, null);
			insert(target, t3, anchor);
			insert(target, div6, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*tags*/ ctx[2].length) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*tags*/ 4) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div0, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (dirty & /*searchTag, tags*/ 20) {
				each_value_1 = /*tags*/ ctx[2].filter(func).slice(0, 6);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
						transition_in(each_blocks_1[i], 1);
					} else {
						each_blocks_1[i] = create_each_block_1(child_ctx);
						each_blocks_1[i].c();
						transition_in(each_blocks_1[i], 1);
						each_blocks_1[i].m(div1, null);
					}
				}

				group_outros();

				for (i = each_value_1.length; i < each_blocks_1.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			if (dirty & /*searchTag, childrenTags*/ 24) {
				each_value = /*childrenTags*/ ctx[3].filter(func_1).slice(0, 20);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div2, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out_1(i);
				}

				check_outros();
			}

			const wikidata_changes = {};

			if (!updating_word && dirty & /*word*/ 1) {
				updating_word = true;
				wikidata_changes.word = /*word*/ ctx[0];
				add_flush_callback(() => updating_word = false);
			}

			wikidata.$set(wikidata_changes);
		},
		i(local) {
			if (current) return;
			transition_in(if_block);

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks_1[i]);
			}

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			transition_in(wikidata.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			each_blocks_1 = each_blocks_1.filter(Boolean);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				transition_out(each_blocks_1[i]);
			}

			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			transition_out(wikidata.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div4);
			if (if_block) if_block.d();
			destroy_each(each_blocks_1, detaching);
			destroy_each(each_blocks, detaching);
			destroy_component(wikidata);
			if (detaching) detach(t3);
			if (detaching) detach(div6);
		}
	};
}

const func = ([t, c]) => c > 2;
const func_1 = ([t, c]) => c > 2;

function instance($$self, $$props, $$invalidate) {
	let $overview;
	let $stats;
	let $filter;
	component_subscribe($$self, overview, $$value => $$invalidate(6, $overview = $$value));
	component_subscribe($$self, stats, $$value => $$invalidate(7, $stats = $$value));
	component_subscribe($$self, filter, $$value => $$invalidate(16, $filter = $$value));
	let folder;
	let cache;
	let word;
	let id, title = "", children = [];
	let links = [], folders = [];
	let path;
	let tags = [];
	let childrenTags = [];
	let data = [];

	const getBookmark = async (currentTab = {}) => {
		let searchResult = await chromeApi.bookmarks.search({ url: currentTab.url });
		return searchResult && searchResult[0];
	};

	let predictions = [];

	function predicted({ detail }) {
		console.log("predicted", detail);
		predictions = detail || [];
	}

	function searchTag(tag) {
		set_store_value(filter, $filter = tag, $filter);
		$$invalidate(0, word = tag);
	}

	const click_handler = tag => searchTag(tag);
	const click_handler_1 = tag => searchTag(tag);

	function wikidata_word_binding(value) {
		word = value;
		$$invalidate(0, word);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$overview*/ 64) {
			$: $$invalidate(5, folder = $overview);
		}

		if ($$self.$$.dirty & /*$stats*/ 128) {
			$: cache = $stats.cache;
		}

		if ($$self.$$.dirty & /*folder*/ 32) {
			$: if (folder) {
				console.log("analisysFolder");
				id = folder.id;
				$$invalidate(1, title = folder.title || "root");
				children = folder.children;
				path = folder.path;
				$$invalidate(2, tags = [...folder.tags]);
				$$invalidate(3, childrenTags = Object.entries([...folder.children.filter(n => n.tags).map(n => n.tags).flat()].reduce((unique, [t, c]) => (unique[t] = (unique[t] || 0) + c) && unique, {})).sort(([a, b], [c, d]) => d - b));
			}
		}
	};

	return [
		word,
		title,
		tags,
		childrenTags,
		searchTag,
		folder,
		$overview,
		$stats,
		click_handler,
		click_handler_1,
		wikidata_word_binding
	];
}

class Analisys extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Analisys;