import { S as SvelteComponent, i as init, s as safe_not_equal, w as empty, e as insert, x as group_outros, q as transition_out, y as check_outros, t as transition_in, g as detach, c as createEventDispatcher, z as tick, v as binding_callbacks, k as create_slot, j as element, A as text, l as space, d as attr, f as append, p as listen, B as set_data, u as update_slot, C as select_option, n as noop, D as destroy_each, r as run_all } from './common/index-c896576c.js';

/* node_modules/svelte-inline-input/src/InlineInput.svelte generated by Svelte v3.31.1 */
const get_selectCaret_slot_changes = dirty => ({});
const get_selectCaret_slot_context = ctx => ({});

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[14] = list[i].label;
	child_ctx[0] = list[i].value;
	child_ctx[28] = i;
	return child_ctx;
}

// (100:0) {:else}
function create_else_block(ctx) {
	let span;
	let t0;
	let t1;
	let current;
	let mounted;
	let dispose;
	const selectCaret_slot_template = /*#slots*/ ctx[22].selectCaret;
	const selectCaret_slot = create_slot(selectCaret_slot_template, ctx, /*$$scope*/ ctx[21], get_selectCaret_slot_context);
	const selectCaret_slot_or_fallback = selectCaret_slot || fallback_block(ctx);

	return {
		c() {
			span = element("span");
			t0 = text(/*label*/ ctx[14]);
			t1 = space();
			if (selectCaret_slot_or_fallback) selectCaret_slot_or_fallback.c();
			attr(span, "class", /*labelClasses*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t0);
			append(span, t1);

			if (selectCaret_slot_or_fallback) {
				selectCaret_slot_or_fallback.m(span, null);
			}

			current = true;

			if (!mounted) {
				dispose = listen(span, "click", /*toggle*/ ctx[15]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (!current || dirty & /*label*/ 16384) set_data(t0, /*label*/ ctx[14]);

			if (selectCaret_slot) {
				if (selectCaret_slot.p && dirty & /*$$scope*/ 2097152) {
					update_slot(selectCaret_slot, selectCaret_slot_template, ctx, /*$$scope*/ ctx[21], dirty, get_selectCaret_slot_changes, get_selectCaret_slot_context);
				}
			} else {
				if (selectCaret_slot_or_fallback && selectCaret_slot_or_fallback.p && dirty & /*isSelect*/ 8192) {
					selectCaret_slot_or_fallback.p(ctx, dirty);
				}
			}

			if (!current || dirty & /*labelClasses*/ 8) {
				attr(span, "class", /*labelClasses*/ ctx[3]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(selectCaret_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(selectCaret_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(span);
			if (selectCaret_slot_or_fallback) selectCaret_slot_or_fallback.d(detaching);
			mounted = false;
			dispose();
		}
	};
}

// (82:30) 
function create_if_block_2(ctx) {
	let select;
	let if_block_anchor;
	let mounted;
	let dispose;
	let if_block = /*placeholder*/ ctx[2] && create_if_block_3(ctx);
	let each_value = /*options*/ ctx[7];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			select = element("select");
			if (if_block) if_block.c();
			if_block_anchor = empty();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(select, "class", /*inputClasses*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, select, anchor);
			if (if_block) if_block.m(select, null);
			append(select, if_block_anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(select, null);
			}

			select_option(select, /*value*/ ctx[0]);
			/*select_binding*/ ctx[25](select);

			if (!mounted) {
				dispose = [
					listen(select, "change", /*handleChange*/ ctx[19]),
					listen(select, "blur", /*handleBlur*/ ctx[18])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*placeholder*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_3(ctx);
					if_block.c();
					if_block.m(select, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*options*/ 128) {
				each_value = /*options*/ ctx[7];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(select, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*inputClasses*/ 16) {
				attr(select, "class", /*inputClasses*/ ctx[4]);
			}

			if (dirty & /*value*/ 1) {
				select_option(select, /*value*/ ctx[0]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(select);
			if (if_block) if_block.d();
			destroy_each(each_blocks, detaching);
			/*select_binding*/ ctx[25](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (72:32) 
function create_if_block_1(ctx) {
	let textarea;
	let mounted;
	let dispose;

	return {
		c() {
			textarea = element("textarea");
			attr(textarea, "class", /*inputClasses*/ ctx[4]);
			attr(textarea, "placeholder", /*placeholder*/ ctx[2]);
			textarea.value = /*value*/ ctx[0];
			attr(textarea, "rows", /*rows*/ ctx[5]);
			attr(textarea, "cols", /*cols*/ ctx[6]);
		},
		m(target, anchor) {
			insert(target, textarea, anchor);
			/*textarea_binding*/ ctx[24](textarea);

			if (!mounted) {
				dispose = [
					listen(textarea, "input", /*handleInput*/ ctx[16]),
					listen(textarea, "blur", /*handleBlur*/ ctx[18])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*inputClasses*/ 16) {
				attr(textarea, "class", /*inputClasses*/ ctx[4]);
			}

			if (dirty & /*placeholder*/ 4) {
				attr(textarea, "placeholder", /*placeholder*/ ctx[2]);
			}

			if (dirty & /*value*/ 1) {
				textarea.value = /*value*/ ctx[0];
			}

			if (dirty & /*rows*/ 32) {
				attr(textarea, "rows", /*rows*/ ctx[5]);
			}

			if (dirty & /*cols*/ 64) {
				attr(textarea, "cols", /*cols*/ ctx[6]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(textarea);
			/*textarea_binding*/ ctx[24](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (62:0) {#if editing && (isText || isNumber)}
function create_if_block(ctx) {
	let input;
	let mounted;
	let dispose;

	return {
		c() {
			input = element("input");
			attr(input, "class", /*inputClasses*/ ctx[4]);
			attr(input, "type", /*type*/ ctx[1]);
			input.value = /*value*/ ctx[0];
			attr(input, "placeholder", /*placeholder*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, input, anchor);
			/*input_binding*/ ctx[23](input);

			if (!mounted) {
				dispose = [
					listen(input, "input", /*handleInput*/ ctx[16]),
					listen(input, "keyup", /*handleEnter*/ ctx[17]),
					listen(input, "blur", /*handleBlur*/ ctx[18])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*inputClasses*/ 16) {
				attr(input, "class", /*inputClasses*/ ctx[4]);
			}

			if (dirty & /*type*/ 2) {
				attr(input, "type", /*type*/ ctx[1]);
			}

			if (dirty & /*value*/ 1 && input.value !== /*value*/ ctx[0]) {
				input.value = /*value*/ ctx[0];
			}

			if (dirty & /*placeholder*/ 4) {
				attr(input, "placeholder", /*placeholder*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(input);
			/*input_binding*/ ctx[23](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (106:6) {#if isSelect}
function create_if_block_4(ctx) {
	let span;

	return {
		c() {
			span = element("span");
			span.textContent = "â–¼";
		},
		m(target, anchor) {
			insert(target, span, anchor);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (105:29)        
function fallback_block(ctx) {
	let if_block_anchor;
	let if_block = /*isSelect*/ ctx[13] && create_if_block_4();

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*isSelect*/ ctx[13]) {
				if (if_block) ; else {
					if_block = create_if_block_4();
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (89:4) {#if placeholder}
function create_if_block_3(ctx) {
	let option;
	let t;

	return {
		c() {
			option = element("option");
			t = text(/*placeholder*/ ctx[2]);
			option.selected = true;
			option.__value = "";
			option.value = option.__value;
			option.disabled = true;
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t);
		},
		p(ctx, dirty) {
			if (dirty & /*placeholder*/ 4) set_data(t, /*placeholder*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

// (92:4) {#each options as { label, value }
function create_each_block(ctx) {
	let option;
	let t0_value = /*label*/ ctx[14] + "";
	let t0;
	let t1;
	let option_key_value;
	let option_value_value;

	return {
		c() {
			option = element("option");
			t0 = text(t0_value);
			t1 = space();
			attr(option, "key", option_key_value = /*i*/ ctx[28]);
			option.__value = option_value_value = /*value*/ ctx[0];
			option.value = option.__value;
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t0);
			append(option, t1);
		},
		p(ctx, dirty) {
			if (dirty & /*options*/ 128 && t0_value !== (t0_value = /*label*/ ctx[14] + "")) set_data(t0, t0_value);

			if (dirty & /*options*/ 128 && option_value_value !== (option_value_value = /*value*/ ctx[0])) {
				option.__value = option_value_value;
				option.value = option.__value;
			}
		},
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

function create_fragment(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_if_block_1, create_if_block_2, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*editing*/ ctx[11] && (/*isText*/ ctx[8] || /*isNumber*/ ctx[9])) return 0;
		if (/*editing*/ ctx[11] && /*isTextArea*/ ctx[10]) return 1;
		if (/*editing*/ ctx[11] && /*isSelect*/ ctx[13]) return 2;
		return 3;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let isText;
	let isNumber;
	let isTextArea;
	let isSelect;
	let { $$slots: slots = {}, $$scope } = $$props;
	const dispatch = createEventDispatcher();
	let { value = "" } = $$props;
	let { type = "text" } = $$props;
	let { placeholder = "" } = $$props;
	let { labelClasses = "" } = $$props;
	let { inputClasses = "" } = $$props;
	let { rows = 2 } = $$props;
	let { cols = 20 } = $$props;
	let { options = [] } = $$props;
	let editing = false;
	let inputEl;
	let label;
	let selectedIndex = options.findIndex(o => o.value === value);

	const toggle = async _ => {
		$$invalidate(11, editing = !editing);

		if (editing) {
			await tick();
			inputEl.focus();
		}
	};

	const handleInput = e => {
		$$invalidate(0, value = isNumber ? +e.target.value : e.target.value);
	};

	const handleEnter = e => {
		if (e.keyCode === 13) inputEl.blur();
	};

	const handleBlur = _ => {
		toggle();
		dispatch("blur", value);
	};

	const handleChange = e => {
		$$invalidate(20, selectedIndex = placeholder
		? e.target.selectedIndex - 1
		: e.target.selectedIndex);

		$$invalidate(0, value = options[selectedIndex].value);
	};

	function input_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			inputEl = $$value;
			$$invalidate(12, inputEl);
			$$invalidate(7, options);
		});
	}

	function textarea_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			inputEl = $$value;
			$$invalidate(12, inputEl);
			$$invalidate(7, options);
		});
	}

	function select_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			inputEl = $$value;
			$$invalidate(12, inputEl);
			$$invalidate(7, options);
		});
	}

	$$self.$$set = $$props => {
		if ("value" in $$props) $$invalidate(0, value = $$props.value);
		if ("type" in $$props) $$invalidate(1, type = $$props.type);
		if ("placeholder" in $$props) $$invalidate(2, placeholder = $$props.placeholder);
		if ("labelClasses" in $$props) $$invalidate(3, labelClasses = $$props.labelClasses);
		if ("inputClasses" in $$props) $$invalidate(4, inputClasses = $$props.inputClasses);
		if ("rows" in $$props) $$invalidate(5, rows = $$props.rows);
		if ("cols" in $$props) $$invalidate(6, cols = $$props.cols);
		if ("options" in $$props) $$invalidate(7, options = $$props.options);
		if ("$$scope" in $$props) $$invalidate(21, $$scope = $$props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*type*/ 2) {
			// Computed
			 $$invalidate(8, isText = type === "text");
		}

		if ($$self.$$.dirty & /*type*/ 2) {
			 $$invalidate(9, isNumber = type === "number");
		}

		if ($$self.$$.dirty & /*type*/ 2) {
			 $$invalidate(10, isTextArea = type === "textarea");
		}

		if ($$self.$$.dirty & /*type*/ 2) {
			 $$invalidate(13, isSelect = type === "select");
		}

		if ($$self.$$.dirty & /*isNumber, value, placeholder, isText, isTextArea, selectedIndex, options*/ 1050501) {
			 if (isNumber) {
				$$invalidate(14, label = value === "" ? placeholder : value);
			} else if (isText || isTextArea) {
				$$invalidate(14, label = value ? value : placeholder);
			} else {
				// Select
				$$invalidate(14, label = selectedIndex === -1
				? placeholder
				: options[selectedIndex].label);
			}
		}
	};

	return [
		value,
		type,
		placeholder,
		labelClasses,
		inputClasses,
		rows,
		cols,
		options,
		isText,
		isNumber,
		isTextArea,
		editing,
		inputEl,
		isSelect,
		label,
		toggle,
		handleInput,
		handleEnter,
		handleBlur,
		handleChange,
		selectedIndex,
		$$scope,
		slots,
		input_binding,
		textarea_binding,
		select_binding
	];
}

class InlineInput extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			value: 0,
			type: 1,
			placeholder: 2,
			labelClasses: 3,
			inputClasses: 4,
			rows: 5,
			cols: 6,
			options: 7
		});
	}
}

export default InlineInput;
